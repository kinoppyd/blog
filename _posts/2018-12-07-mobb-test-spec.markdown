---
author: kinoppyd
date: 2018-12-07 17:21:24+00:00
layout: post
title: Mobb, test, spec
---

このエントリは、 Mobb/Repp Advent Calender の八日目です





## 最初にはっきり言っておくこと


このエントリは読まなくていい


## Mobbのテスト


無い。現状、存在が無い。皆無。虚無。無。無って漢字に飽きてきた？　じゃあ観測できないって言いかえる。


## Mobbをテストするということ


Mobbをテストするということは簡単です。簡単ではないですが、書けます。なぜなら、MobbはSinatraのコピーとも言えるプロダクトなので、テストもコピーしてしまえば言いわけです。

ただ、現状そうもいっていない。私の時間ややる気の大小は感情的問題なので、定量的な判断からは除いておくと、Mobbの開発はあまり活発とは言えません。なので、単に書いていないだけです。これに関しては激しく切腹という言葉が脳裏に浮かびつつもどうにもならない問題で、時間とキーボードのストロークが解決してくれると思っています。どうしてMobbそのもののテストが無いのかという問題に立ち向かうとき、あなたはテストを書きましょう、私は怠けてしまったのです。としか言えません。


## Mobbアプリケーションをテストするということ


Mobbアプリケーションをテストするということは、ほぼそのままの意味でReppアプリケーションをテストするということです。なぜなら、MobbはReppアプリケーションを作成するためのDLSであるからです。これをわかりやすく言うと、SinatraのテストをするということはRackアプリケーションをテストするということ、と同義です。

さて、Sinatraのテストはどう書くのか？　正確に言うと、Rackアプリケーションのテストはどう書くのか？　それは、Rack::Testというものを使います。

https://github.com/rack-test/rack-test

これは、シンプルな意味でRackアプリケーションをテストするためのヘルパー群の集まりです。Rspecやtest-unitなどの各種テストスイーツを利用できます。

同じように、RackにもRack::Testというモジュールを追加する予定があります。現在鋭意製作中ですが、概ねRack::Testと似たような構成になると思っています。

Rack::Testは、内側でセッション情報などいろいろなものを頑張って扱っていますが、幸いMobb/Repp構成においてセッション情報とかいうものはあまり関係無かったりするので、Rack::Testよりは多少シンプルになるのではないでしょうか。


## 最後に


ネタが切れてきた
